input {
  # HTTP input with authentication and rate limiting
  https {
    port => 5001
    codec => json
    user => "${LOGSTASH_USER}"
    password => "${LOGSTASH_PASSWORD}"
    threads => 4
    additional_codecs => {
      "application/json" => "json"
    }
  }
  
  # Beats input with SSL (configure SSL in production)
  beats {
    port => 5044
    # SSL configuration (uncomment for production)
    # ssl => true
    # ssl_certificate => "/usr/share/logstash/config/certs/logstash.crt"
    # ssl_key => "/usr/share/logstash/config/certs/logstash.key"
    # ssl_certificate_authorities => ["/usr/share/logstash/config/certs/ca.crt"]
    # ssl_verify_mode => "force_peer"
  }
  
  # UDP input with validation
  udp {
    port => 5002
    codec => json_lines
    receive_buffer_bytes => 1048576
    workers => 2
  }
}

filter {
  # Security: Validate source and drop suspicious events
  if [agent][type] and [agent][type] !~ /^(filebeat|metricbeat|heartbeat|auditbeat)$/ {
    mutate { add_tag => ["suspicious_agent"] }
  }
  
  # Security: Source IP validation (adjust for your network)
  if [host][ip] and [host][ip] !~ /^(127\.0\.0\.1|172\.(1[6-9]|2[0-9]|3[01])\.|10\.|192\.168\.)/ {
    mutate { add_tag => ["external_source"] }
    # Optionally drop external sources
    # drop { }
  }
  
  # Security: Sanitize sensitive data
  mutate {
    # Remove potential sensitive fields (case-insensitive)
    remove_field => [ 
      "password", "passwd", "secret", "token", "key", "api_key", 
      "authorization", "auth", "credential", "private", "ssn",
      "credit_card", "card_number", "cvv", "pin"
    ]
  }
  
  # Security: Redact sensitive patterns in message field
  if [message] {
    # Redact email addresses
    mutate {
      gsub => [
        "message", "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b", "[EMAIL_REDACTED]"
      ]
    }
    
    # Redact IP addresses (optional)
    mutate {
      gsub => [
        "message", "\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b", "[IP_REDACTED]"
      ]
    }
    
    # Redact potential credit card numbers
    mutate {
      gsub => [
        "message", "\b(?:\d{4}[-\s]?){3}\d{4}\b", "[CARD_REDACTED]"
      ]
    }
  }
  
  # Add security metadata
  mutate {
    add_field => { 
      "[@metadata][security_processed]" => "true"
      "[@metadata][processing_timestamp]" => "%{+yyyy-MM-dd'T'HH:mm:ss.SSSZ}"
      "security_level" => "filtered"
    }
  }
  
  # Timestamp processing
  if ![timestamp] and ![@timestamp] {
    ruby {
      code => "event.set('@timestamp', Time.now.utc)"
    }
  }
  
  if [timestamp] and ![timestamp_parsed] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" ]
      target => "@timestamp"
      add_tag => [ "timestamp_parsed" ]
    }
  }
  
  # Service identification
  if ![service] {
    if [container][name] {
      mutate { add_field => { "service" => "%{[container][name]}" } }
    } else {
      mutate { add_field => { "service" => "unknown" } }
    }
  }
  
  # Log level normalization
  if ![level] and ![log][level] {
    mutate { add_field => { "level" => "info" } }
  }
  
  # GeoIP enrichment for external IPs
  if [source][ip] and "external_source" in [tags] {
    geoip {
      source => "[source][ip]"
      target => "geoip"
      add_tag => ["geoip_enriched"]
    }
  }
  
  # Security alerting for suspicious patterns
  if [message] =~ /(?i)(attack|exploit|injection|malware|virus)/ {
    mutate {
      add_field => { "security_alert" => "suspicious_content" }
      add_tag => ["security_alert"]
    }
  }
  
  # Failed authentication detection
  if [message] =~ /(?i)(failed.*(login|auth|password)|invalid.*(user|credential))/ {
    mutate {
      add_field => { "security_alert" => "auth_failure" }
      add_tag => ["auth_failure", "security_alert"]
    }
  }
}

output {
  # Security alerts go to dedicated index
  if "_grokparsefailure" not in [tags] and "_jsonparsefailure" not in [tags] and "security_alert" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      index => "security-alerts-%{+yyyy.MM.dd}"
      # Retry configuration
      retry_on_conflict => 3
    }
  }
  
  # Regular logs go to main index
  if "_grokparsefailure" not in [tags] and "_jsonparsefailure" not in [tags] and "security_alert" not in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      index => "logstash-%{+yyyy.MM.dd}"
      # Retry configuration
      retry_on_conflict => 3
    }
  }
  
  # Parse failures go to error index
  if "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      user => "elastic"
      password => "${ELASTIC_PASSWORD}"
      index => "logstash-errors-%{+yyyy.MM.dd}"
      # Retry configuration
      retry_on_conflict => 3
    }
  }
  
  # High-priority security alerts also go to stdout for immediate visibility
  if "security_alert" in [tags] {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }
}